# gui/login_window.py

from PyQt6.QtWidgets import (
    QDialog, QLabel, QLineEdit, QPushButton, QVBoxLayout, QMessageBox
)
from PyQt6.QtCore import QTimer
from concurrent.futures import ThreadPoolExecutor, TimeoutError
import socket


class LoginWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.resize(300, 160)

        self.server_input = QLineEdit()
        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.login_button = QPushButton("–í–æ–π—Ç–∏")
        self.login_button.clicked.connect(self.handle_login)

        layout = QVBoxLayout()
        layout.addWidget(QLabel("IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:"))
        layout.addWidget(self.server_input)
        layout.addWidget(QLabel("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"))
        layout.addWidget(self.username_input)
        layout.addWidget(QLabel("–ü–∞—Ä–æ–ª—å:"))
        layout.addWidget(self.password_input)
        layout.addWidget(self.login_button)
        self.setLayout(layout)

        self.main_window = None

    def handle_login(self):
        server = self.server_input.text().strip()
        username = self.username_input.text().strip()
        password = self.password_input.text().strip()

        if not server or not username or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        self.login_button.setEnabled(False)
        self.login_button.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        try:
            socket.gethostbyname(server)  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS/IP
        except socket.gaierror:
            self.show_error("‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.")
            return

        from checkpoint_client import CheckpointClient
        client = CheckpointClient(server, username, password)

        def try_login():
            return client.login()

        executor = ThreadPoolExecutor(max_workers=1)
        future = executor.submit(try_login)

        def check_result():
            if future.done():
                try:
                    result = future.result()
                    if result:
                        self.launch_main_window(client)
                    else:
                        self.show_error("üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
                except Exception as e:
                    self.show_error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
                finally:
                    executor.shutdown(wait=False)
            else:
                self.show_error("‚è± –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
                executor.shutdown(wait=False)

        # –ß–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        QTimer.singleShot(3000, check_result)

    def show_error(self, message: str):
        self.login_button.setEnabled(True)
        self.login_button.setText("–í–æ–π—Ç–∏")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", message)

    def launch_main_window(self, client):
        from gui.main_window import MainWindow
        self.main_window = MainWindow(client)
        self.main_window.show()
        self.accept()
