# main_window.py


import csv
import os

from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import (
    QComboBox, QDialog, QFileDialog, QHBoxLayout, QHeaderView, QLabel,
    QMainWindow, QMessageBox, QPushButton, QSplitter, QTableWidget,
    QTableWidgetItem, QTabWidget, QTextEdit, QVBoxLayout, QWidget
)

from infrastructure.checkpoint_api_client import CheckpointClient
from infrastructure.logger import logger
from gui.audit.audit_settings_dialog import AuditSettingsDialog
from services import AuditService, FetchService, PolicyService
from gui.rules.rules_table import create_rules_table
from gui.audit.audit_table import create_audit_table
from gui.utils.table_to_csv_exporter import TableExporterCSV
from gui.utils.table_from_csv_loader import load_table_from_csv


class MainWindow(QMainWindow):
    def __init__(self, client: CheckpointClient):
        super().__init__()
        self.client = client
        self.setWindowTitle("CheckPoint Audit Tool")
        self.resize(1200, 800)

        self.audit_service = AuditService(log_func=self.print_log)
        self.policy_service = PolicyService()

        self.audit_checks = {
            'any_to_any_accept': True,
            'no_track': True,
            'hit_count_zero': True,
            'disabled_rule': True,
            'any_service_accept': True,
            'any_destination_accept': True,
            'any_source_accept': True,
        }

        self.tabs = QTabWidget()
        self.rules_tab = QWidget()
        self.audit_tab = QWidget()
        self.console_output = QTextEdit()
        self.console_output.setReadOnly(True)

        self.layer_selector = QComboBox()
        self.layer_selector.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏...")

        self.audit_layer_selector = QComboBox()
        self.audit_layer_selector.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π –¥–ª—è –∞—É–¥–∏—Ç–∞...")

        self.init_rules_tab()
        self.init_audit_tab()

        self.tabs.addTab(self.rules_tab, "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞")
        self.tabs.addTab(self.audit_tab, "–ê—É–¥–∏—Ç")

        splitter = QSplitter(Qt.Orientation.Vertical)
        splitter.addWidget(self.tabs)
        splitter.addWidget(self.console_output)

        container = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(splitter)
        container.setLayout(layout)
        self.setCentralWidget(container)

    def init_rules_tab(self):
        layout = QVBoxLayout()

        self.fetch_button = QPushButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ —Å –ú–≠")
        self.fetch_button.clicked.connect(self.fetch_from_firewall)

        self.load_button = QPushButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–π")
        self.load_button.clicked.connect(self.export_and_load_selected_layer)
        self.load_button.setEnabled(False)

        self.export_button = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
        self.export_button.clicked.connect(self.export_rules_table)
        self.export_button.setEnabled(False)

        self.rules_table = create_rules_table()

        control_layout = QHBoxLayout()
        control_layout.addWidget(QLabel("–°–ª–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏:"))
        control_layout.addWidget(self.layer_selector)
        control_layout.addWidget(self.load_button)
        control_layout.addStretch()

        layout.addWidget(self.fetch_button)
        layout.addLayout(control_layout)
        layout.addWidget(self.rules_table)

        export_layout = QHBoxLayout()
        export_layout.addStretch()
        export_layout.addWidget(self.export_button)
        layout.addLayout(export_layout)

        self.rules_tab.setLayout(layout)

    def init_audit_tab(self):
        layout = QVBoxLayout()

        self.audit_button = QPushButton("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É–¥–∏—Ç")
        self.audit_button.clicked.connect(self.run_audit)

        self.settings_button = QPushButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏—Ç–∞")
        self.settings_button.clicked.connect(self.open_audit_settings)

        self.export_audit_button = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∞—É–¥–∏—Ç–∞ –≤ CSV")
        self.export_audit_button.clicked.connect(self.export_audit_table)
        self.export_audit_button.setEnabled(False)

        audit_controls = QHBoxLayout()
        audit_controls.addWidget(QLabel("–°–ª–æ–π –¥–ª—è –∞—É–¥–∏—Ç–∞:"))
        audit_controls.addWidget(self.audit_layer_selector)
        audit_controls.addWidget(self.audit_button)
        audit_controls.addWidget(self.settings_button)
        audit_controls.addWidget(self.export_audit_button)

        self.audit_table = create_audit_table()

        layout.addLayout(audit_controls)
        layout.addWidget(self.audit_table)
        self.audit_tab.setLayout(layout)

    def run_audit(self):
        layer = self.audit_layer_selector.currentText()
        if not layer:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π.")
            return
        try:
            findings, summary = self.audit_service.audit_layer(layer, self.audit_checks)

            if not findings:
                QMessageBox.information(self, "–ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            self.audit_service.export_findings(findings, "tmp/audit_findings.csv")
            load_table_from_csv(self.audit_table, "tmp/audit_findings.csv", self.print_log)
            self.export_audit_button.setEnabled(True)

        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def open_audit_settings(self):
        dialog = AuditSettingsDialog(self.audit_checks)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.audit_checks = dialog.get_selected_checks()
            self.print_log("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def fetch_from_firewall(self):
        try:
            self.print_log("üöÄ –ó–∞–ø—É—Å–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —Ñ–æ–Ω–µ...")
            self.fetch_button.setEnabled(False)

            self.fetch_service = FetchService(
                client=self.client,
                policy_service=self.policy_service,
                on_progress=self.print_log,
                on_result=self.handle_fetch_success,
                on_error=self.handle_fetch_error,
            )
            self.fetch_service.start()

        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def handle_fetch_success(self):
        self.populate_layers()
        self.load_button.setEnabled(True)
        self.export_button.setEnabled(True)
        self.fetch_button.setEnabled(True)
        self.print_log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    def handle_fetch_error(self, message: str):
        self.print_log(message)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
        self.fetch_button.setEnabled(True)

    def handle_fetch_result(self, policies, dict_objects, all_objects):
        try:
            self.policy_service.save_policies(policies, dict_objects, all_objects)
            self.populate_layers()
            self.load_button.setEnabled(True)
            self.export_button.setEnabled(True)
            self.fetch_button.setEnabled(True)
            self.print_log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def populate_layers(self):
        try:
            layers = self.policy_service.get_policy_layers()
            self.layer_selector.clear()
            self.audit_layer_selector.clear()
            for layer in layers:
                self.layer_selector.addItem(layer)
                self.audit_layer_selector.addItem(layer)
            self.print_log("‚úÖ –°–ª–æ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—ë–≤: {e}")

    def export_and_load_selected_layer(self):
        layer = self.layer_selector.currentText()
        if not layer:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π.")
            return
        try:
            self.policy_service.export_layer(layer, "tmp/rules_export.csv")
            load_table_from_csv(self.rules_table, "tmp/rules_export.csv", self.print_log)
        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


    def export_table_to_csv(self, table_widget: QTableWidget, dialog_title: str = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSV"):
        path, _ = QFileDialog.getSaveFileName(self, dialog_title, "", "CSV Files (*.csv)")
        if not path:
            return
        try:
            TableExporterCSV(table_widget, path).export()
            self.print_log(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {path}")
        except Exception as e:
            self.print_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def export_rules_table(self):
        self.export_table_to_csv(self.rules_table, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤–∏–ª")

    def export_audit_table(self):
        self.export_table_to_csv(self.audit_table, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –æ–± –∞—É–¥–∏—Ç–µ")

    def print_log(self, message: str, level="info"):
        if level == "debug":
            logger.debug(message)
        elif level == "warning":
            logger.warning(message)
        elif level == "error":
            logger.error(message)
        else:
            logger.info(message)
        self.console_output.append(message)
